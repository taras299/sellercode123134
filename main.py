import logging
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.filters.state import StateFilter
from aiocryptopay import AioCryptoPay, Networks
import database as db
import requests
import random
import string

API_TOKEN = 'botfather'
CRYPTO_PAY_API_KEY = 'cryptopay'

logging.basicConfig(level=logging.INFO)
bot = Bot(token=API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

crypto = AioCryptoPay(token=CRYPTO_PAY_API_KEY, network=Networks.MAIN_NET)

class TopUpState(StatesGroup):
    amount = State()
    invoice_id = State()

db.init_db()

@dp.message(Command(commands=['start']))
async def send_welcome(message: types.Message):
    db.add_user(message.from_user.id)
    kb = [
        [
            KeyboardButton(text="–ú–µ–Ω—é"),
            KeyboardButton(text="–ü—Ä–æ—Ñ–∏–ª—å")
        ],
        [
            KeyboardButton(text="–ò–Ω—Ñ–æ")
        ]
    ]
    keyboard = ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True)
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –ò—Å–ø–æ–ª—å–∑—É–π —Å–Ω–∏–∑—É –∫–Ω–æ–ø–∫–∏!", reply_markup=keyboard)

@dp.message(lambda message: message.text == '–ú–µ–Ω—é')
async def show_menu(message: types.Message):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ö—É–ø–∏—Ç—å –Ω–æ–º–µ—Ä", callback_data="buy_number")],
        [InlineKeyboardButton(text="–ü—Ä–æ—Ñ–∏–ª—å", callback_data="profile")]
    ])
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)

@dp.message(lambda message: message.text == '–ü—Ä–æ—Ñ–∏–ª—å')
async def show_profile(message: types.Message):
    user = db.get_user(message.from_user.id)
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", callback_data="topup_balance")],
        [InlineKeyboardButton(text="–ò–Ω—Ñ–æ", callback_data="info")],
        [InlineKeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –º–µ–Ω—é", callback_data="back_to_menu")]
    ])
    await message.answer(f"–ë–∞–ª–∞–Ω—Å: {user[2]}\nID: {message.from_user.id}", reply_markup=keyboard)

@dp.message(lambda message: message.text == '–ò–Ω—Ñ–æ')
async def show_info(message: types.Message):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–¢–µ—Ö. –ü–æ–¥–¥–µ—Ä–∂–∫–∞", url="https://t.me/shavermasupppp")],
        [InlineKeyboardButton(text="–ö–∞–Ω–∞–ª", url="https://t.me/shavermasup")],
        [InlineKeyboardButton(text="–ü—Ä–∞–≤–∏–ª–∞", callback_data="rules")]
    ])
    await message.answer("–í–æ—Ç –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:", reply_markup=keyboard)

@dp.callback_query(lambda callback_query: callback_query.data == 'buy_number')
async def process_buy_number(callback_query: types.CallbackQuery):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üî•Whatsapp", callback_data="buy_whatsapp")],
        [InlineKeyboardButton(text="üî•Olx", callback_data="buy_olx")],
        [InlineKeyboardButton(text="üó≥Telegram", callback_data="buy_telegram")],
        [InlineKeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –º–µ–Ω—é", callback_data="back_to_main_menu")]
    ])
    await callback_query.answer()
    await callback_query.message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ä–≤–∏—Å –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –Ω–æ–º–µ—Ä–∞:",
        reply_markup=keyboard
    )

@dp.callback_query(lambda callback_query: callback_query.data.startswith('buy_'))
async def process_buy_service(callback_query: types.CallbackQuery):
    service = callback_query.data.split('_')[1]
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ö—É–ø–∏—Ç—å –Ω–æ–º–µ—Ä", callback_data=f"buy_confirm_{service}"),
         InlineKeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="back_to_menu")]
    ])
    await callback_query.answer()
    await callback_query.message.answer(
        f"–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞: –í–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä\n"
        f"–°–µ—Ä–≤–∏—Å: {service.capitalize()}\n"
        f"–¶–µ–Ω–∞: 100—Ä\n"
        f"–û–ø–∏—Å–∞–Ω–∏–µ: –°–æ—Å–∏ —Ö—É–ª–∏.\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=keyboard
    )

@dp.callback_query(lambda callback_query: callback_query.data == 'profile')
async def process_profile(callback_query: types.CallbackQuery):
    user = db.get_user(callback_query.from_user.id)
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", callback_data="topup_balance")],
        [InlineKeyboardButton(text="–ò–Ω—Ñ–æ", callback_data="info")],
        [InlineKeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –º–µ–Ω—é", callback_data="back_to_main_menu")]
    ])
    await callback_query.answer()
    await callback_query.message.answer(f"–ë–∞–ª–∞–Ω—Å: {user[2]}\nID: {callback_query.from_user.id}", reply_markup=keyboard)

@dp.callback_query(lambda callback_query: callback_query.data == 'topup_balance')
async def process_topup_balance(callback_query: types.CallbackQuery):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ö—Ä–∏–ø—Ç–æ–ë–æ—Ç", callback_data="topup_crypto")],
        [InlineKeyboardButton(text="–†—É–±–ª–∏", callback_data="topup_rubles")]
    ])
    await callback_query.answer()
    await callback_query.message.answer("–ß–µ—Ä–µ–∑ —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ?", reply_markup=keyboard)

@dp.callback_query(lambda callback_query: callback_query.data == 'info')
async def process_info(callback_query: types.CallbackQuery):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–¢–µ—Ö. –ü–æ–¥–¥–µ—Ä–∂–∫–∞", url="https://t.me/shavermasupppp")],
        [InlineKeyboardButton(text="–ö–∞–Ω–∞–ª", url="https://t.me/shavermasup")],
        [InlineKeyboardButton(text="–ü—Ä–∞–≤–∏–ª–∞", callback_data="rules")]
    ])
    await callback_query.answer()
    await callback_query.message.answer("–í–æ—Ç –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:", reply_markup=keyboard)

@dp.callback_query(lambda callback_query: callback_query.data == 'rules')
async def process_rules(callback_query: types.CallbackQuery):
    await callback_query.answer()
    await callback_query.message.answer("–ø—Ä–∞–≤–∏–ª–∞.")

@dp.message(Command(commands=['balance']))
async def set_balance(message: types.Message):
    if is_admin(message.from_user.id):
        parts = message.text.split()
        if len(parts) == 3:
            user_id = int(parts[1])
            amount = float(parts[2])
            db.update_balance(user_id, amount)
            await message.answer("–ë–∞–ª–∞–Ω—Å –æ–±–Ω–æ–≤–ª–µ–Ω.")
        else:
            await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /balance [user_id] [amount]")

@dp.message(Command(commands=['ban']))
async def ban_user(message: types.Message):
    if is_admin(message.from_user.id):
        parts = message.text.split()
        if len(parts) == 2:
            user_id = int(parts[1])
            db.ban_user(user_id)
            await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–∞–Ω–µ–Ω.")
        else:
            await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /ban [user_id]")

@dp.message(Command(commands=['unban']))
async def unban_user(message: types.Message):
    if is_admin(message.from_user.id):
        parts = message.text.split()
        if len(parts) == 2:
            user_id = int(parts[1])
            db.unban_user(user_id)
            await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–∞–∑–±–∞–Ω–µ–Ω.")
        else:
            await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /unban [user_id]")

@dp.message(Command(commands=['createpromo']))
async def create_promo(message: types.Message):
    if is_admin(message.from_user.id):
        parts = message.text.split()
        if len(parts) == 3:
            uses = int(parts[1])
            amount = float(parts[2])
            promo_code = generate_x_code()
            db.create_promo(promo_code, uses, amount)
            await message.answer(f"–ü—Ä–æ–º–æ–∫–æ–¥ —Å–æ–∑–¥–∞–Ω: {promo_code}")
        else:
            await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /createpromo [uses] [amount]")

@dp.message(Command(commands=['lusers']))
async def list_users(message: types.Message):
    if is_admin(message.from_user.id):
        users = db.list_users()
        msg = "\n".join([f"{user[1]}: {user[2]}" for user in users])
        await message.answer(msg)

@dp.message(Command(commands=['news']))
async def send_news(message: types.Message):
    if is_admin(message.from_user.id):
        parts = message.text.split(maxsplit=1)
        if len(parts) == 2:
            news_text = parts[1]
            users = db.list_users()
            for user in users:
                await bot.send_message(user[1], news_text)
            await message.answer("–ù–æ–≤–æ—Å—Ç—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞.")
        else:
            await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /news [message]")

@dp.callback_query(lambda callback_query: callback_query.data == 'topup_crypto')
async def process_topup_crypto(callback_query: types.CallbackQuery, state: FSMContext):
    await callback_query.answer()
    await callback_query.message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤ —Ä—É–±–ª—è—Ö")
    await state.set_state(TopUpState.amount)

@dp.message(StateFilter(TopUpState.amount))
async def handle_topup_amount(message: types.Message, state: FSMContext):
    if message.text.isdigit():
        try:
            amount_rub = float(message.text)
            logging.info(f"–°—É–º–º–∞ –≤ —Ä—É–±–ª—è—Ö: {amount_rub}")
            url = 'https://api.exchangerate-api.com/v4/latest/RUB'
            response = requests.get(url)
            rates = response.json().get('rates')
            rub_to_usd_rate = rates.get('USD')
            logging.info(f"–ö—É—Ä—Å RUB –∫ USD: {rub_to_usd_rate}")
            amount_usd = amount_rub * rub_to_usd_rate
            logging.info(f"–°—É–º–º–∞ –≤ USD: {amount_usd}")

            invoice = await crypto.create_invoice(asset='USDT', amount=amount_usd, description='–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞')
            logging.info(f"–°—Å—ã–ª–∫–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É –∏–Ω–≤–æ–π—Å–∞: {invoice.bot_invoice_url}")

            await state.update_data(invoice_id=invoice.invoice_id, amount_rub=amount_rub)
            logging.info(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∏–Ω–≤–æ–π—Å–∞: {invoice.invoice_id}")
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data="check_payment")],
                [InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_payment")]
            ])
            
            await bot.send_message(message.from_user.id, f"–û–ø–ª–∞—Ç–∏—Ç–µ —Å—á–µ—Ç: {invoice.bot_invoice_url}", reply_markup=keyboard)
            await state.set_state(TopUpState.invoice_id)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—É–º–º—ã –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: {e}")
            await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—É–º–º—ã –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            await state.clear()
    else:
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É –≤ —Ä—É–±–ª—è—Ö.")

@dp.callback_query(lambda callback_query: callback_query.data == 'check_payment')
async def check_payment(callback_query: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    invoice_id = data.get('invoice_id')
    amount_rub = data.get('amount_rub')
    
    if not invoice_id:
        await callback_query.message.answer("–û—à–∏–±–∫–∞: –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∏–Ω–≤–æ–π—Å–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    try:
        invoices = await crypto.get_invoices(invoice_ids=[invoice_id])
        if invoices and len(invoices) > 0:
            invoice = invoices[0]
            if invoice.status == 'paid':
                user = db.get_user(callback_query.from_user.id)
                db.update_balance(callback_query.from_user.id, user[2] + amount_rub)
                await callback_query.message.answer(f"–û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞. –í–∞—à –±–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ {amount_rub} —Ä—É–±–ª–µ–π.")
                await state.clear()
            else:
                await callback_query.message.answer("–û–ø–ª–∞—Ç–∞ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        else:
            logging.error(f"–ü–æ–ª—É—á–µ–Ω –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –∏–Ω–≤–æ–π—Å–æ–≤ –¥–ª—è ID: {invoice_id}")
            await callback_query.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –æ–ø–ª–∞—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –æ–ø–ª–∞—Ç—ã: {e}")
        await callback_query.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –æ–ø–ª–∞—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

@dp.callback_query(lambda callback_query: callback_query.data == 'cancel_payment')
async def cancel_payment(callback_query: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    invoice_id = data.get('invoice_id')
    
    if not invoice_id:
        await callback_query.message.answer("–û—à–∏–±–∫–∞: –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∏–Ω–≤–æ–π—Å–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    try:
        await crypto.delete_invoice(invoice_id=invoice_id)
        await callback_query.message.answer("–û–ø–ª–∞—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
        await state.clear()
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –æ–ø–ª–∞—Ç—ã: {e}")
        await callback_query.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –æ–ø–ª–∞—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

def generate_x_code():
    return ''.join(random.choices(string.ascii_uppercase + string.digits, k=10))

def is_admin(user_id):
    admin_ids = [6497382050]  
    return user_id in admin_ids

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
